{
  "_from": "ssh2-sftp-client",
  "_id": "ssh2-sftp-client@6.0.1",
  "_inBundle": false,
  "_integrity": "sha512-Glut2SmK/XpNOBiEuzqlKZGKkIyha2XMbuWVXR2hFUJkNsbyl/wmlZSeUEPxKFp/dC9UEvUKzanKydgLmNdfkw==",
  "_location": "/ssh2-sftp-client",
  "_phantomChildren": {
    "buffer-from": "1.1.1",
    "inherits": "2.0.3",
    "typedarray": "0.0.6",
    "util-deprecate": "1.0.2"
  },
  "_requested": {
    "escapedName": "ssh2-sftp-client",
    "fetchSpec": "latest",
    "name": "ssh2-sftp-client",
    "raw": "ssh2-sftp-client",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ssh2-sftp-client/-/ssh2-sftp-client-6.0.1.tgz",
  "_shasum": "cd901acfd5303ec5da0e10436d5dc484f34e464c",
  "_spec": "ssh2-sftp-client",
  "_where": "/home/sunilkumar/Documents/onlineBook/sampleProject/SFTP",
  "author": {
    "name": "Tim Cross"
  },
  "bugs": {
    "url": "https://github.com/theophilusx/ssh2-sftp-client/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "见见",
      "email": "jyu213@gmail.com",
      "url": "original author"
    }
  ],
  "dependencies": {
    "concat-stream": "^2.0.0",
    "promise-retry": "^2.0.1",
    "ssh2": "^0.8.9",
    "winston": "^3.3.3"
  },
  "deprecated": false,
  "description": "ssh2 sftp client for node",
  "devDependencies": {
    "chai": "^4.2.0",
    "chai-as-promised": "^7.1.1",
    "chai-subset": "^1.6.0",
    "checksum": "^0.1.1",
    "dotenv": "^8.2.0",
    "mocha": "^8.2.1",
    "moment": "^2.29.1",
    "nyc": "^15.1.0",
    "through2": "^4.0.2"
  },
  "email": "theophilusx@gmail.com",
  "homepage": "https://github.com/theophilusx/ssh2-sftp-client#readme",
  "keywords": [
    "nodejs",
    "promises",
    "sftp"
  ],
  "license": "Apache-2.0",
  "main": "src/index.js",
  "name": "ssh2-sftp-client",
  "optionalDependencies": {},
  "readme": "- [Overview](#sec-1)\n- [Installation](#sec-2)\n- [Basic Usage](#sec-3)\n- [Version 6.x Changes](#sec-4)\n  - [Version 6.0.1](#sec-4-1)\n  - [Version 6.0.0 Changes](#sec-4-2)\n- [Documentation](#sec-5)\n  - [Specifying Paths](#sec-5-1)\n  - [Methods](#sec-5-2)\n    - [new SftpClient(name) ===> SFTP client object](#sec-5-2-1)\n    - [connect(config) ===> SFTPstream](#sec-5-2-2)\n    - [list(path, pattern) ==> Array[object]](#sec-5-2-3)\n    - [exists(path) ==> boolean](#sec-5-2-4)\n    - [stat(path) ==> object](#sec-5-2-5)\n    - [get(path, dst, options) ==> String|Stream|Buffer](#sec-5-2-6)\n    - [fastGet(remotePath, localPath, options) ===> string](#sec-5-2-7)\n    - [put(src, remotePath, options) ==> string](#sec-5-2-8)\n    - [fastPut(localPath, remotePath, options) ==> string](#sec-5-2-9)\n    - [append(input, remotePath, options) ==> string](#sec-5-2-10)\n    - [mkdir(path, recursive) ==> string](#sec-5-2-11)\n    - [rmdir(path, recursive) ==> string](#sec-5-2-12)\n    - [delete(path, noErrorOK) ==> string](#sec-5-2-13)\n    - [rename(fromPath, toPath) ==> string](#sec-5-2-14)\n    - [posixRename(fromPath, toPath) ==> string](#sec-5-2-15)\n    - [chmod(path, mode) ==> string](#sec-5-2-16)\n    - [realPath(path) ===> string](#sec-5-2-17)\n    - [cwd() ==> string](#sec-5-2-18)\n    - [uploadDir(srcDir, dstDir, filter) ==> string](#sec-5-2-19)\n    - [downloadDir(srcDir, dstDir, filter) ==> string](#sec-5-2-20)\n    - [end() ==> boolean](#sec-5-2-21)\n    - [Add and Remove Listeners](#sec-5-2-22)\n- [Platform Quirks & Warnings](#sec-6)\n  - [Server Capabilities](#sec-6-1)\n  - [Promises & Events](#sec-6-2)\n  - [Windows Based Servers](#sec-6-3)\n  - [Don't Re-use SftpClient Objects](#sec-6-4)\n- [FAQ](#sec-7)\n  - [Remote server drops connections with only an end event](#sec-7-1)\n  - [How can I pass writable stream as dst for get method?](#sec-7-2)\n  - [How can I upload files without having to specify a password?](#sec-7-3)\n  - [How can I connect through a Socks Proxy](#sec-7-4)\n  - [Timeout while waiting for handshake or handshake errors](#sec-7-5)\n  - [How can I limit upload/download speed](#sec-7-6)\n- [Examples](#sec-8)\n- [Troubleshooting](#sec-9)\n  - [Common Errors](#sec-9-1)\n    - [Not returning the promise in a `then()` block](#sec-9-1-1)\n    - [Mixing Promise Chains and Async/Await](#sec-9-1-2)\n    - [Try/catch and Error Handlers](#sec-9-1-3)\n    - [Server Differences](#sec-9-1-4)\n    - [Avoid Concurrent Operations](#sec-9-1-5)\n  - [Debugging Support](#sec-9-2)\n- [Logging Issues](#sec-10)\n- [Pull Requests](#sec-11)\n- [Contributors](#sec-12)\n\n\n# Overview<a id=\"sec-1\"></a>\n\nan SFTP client for node.js, a wrapper around [SSH2](https://github.com/mscdex/ssh2) which provides a high level convenience abstraction as well as a Promise based API.\n\nDocumentation on the methods and available options in the underlying modules can be found on the [SSH2](https://github.com/mscdex/ssh2) and [SSH2-STREAMS](https://github.com/mscdex/ssh2-streams/blob/master/SFTPStream.md) project pages.\n\nCurrent stable release is **v5.3.2**.\n\nCode has been tested against Node versions 12.18.2 and 13.14.0\n\nNode versions < 10.x are not supported.\n\n<span class=\"underline\">WARNING</span> There is currently a regression error with versions of node later than version 14.0. It appears that when using streams with chunk sizes which exceed the high water mark for the stream, a drain event is no longer emitted. As a result, streams with sufficient data will hang indefinitely. This appears to affect fastput, fastget, put and possibly get operations. Until this issue is resolved and a new version of ssh2/ssh2-streams is released, using node v14 is not recommended.\n\nA bug report hass been logged against the ssh2-streams library as [issue 156](https://github.com/mscdex/ssh2-streams/issues/156).\n\n<span class=\"underline\">UPDATE</span>: The author of the upstream ssh2 and ssh2-streams module has decided on a re-write of the ssh2 module to address the above issues as well as some other design limitations and to allow the module to better fit in with newer versions of node. As part of that process, the functionality of ssh2-streams is being incorporated into the main ssh2 module and the ssh2-streams module is being deprecated. This will require a significant update to this module and may result in some API changes, depending on what changes in the re-write of ssh2.\n\nTo support these changes, a new branch called *version-6* has been created. This branch will use the newest version of ssh2 and for now is very much experimental and subject to change.\n\n<span class=\"underline\">UPDATE</span>: Apparently the change in core node which cause the issue with ssh2 has been rolled back in node version 15.3.0. Testing seems to indicate the above issue does not exist in that version of node.\n\n# Installation<a id=\"sec-2\"></a>\n\n```shell\nnpm install ssh2-sftp-client\n```\n\n# Basic Usage<a id=\"sec-3\"></a>\n\n```javascript\nlet Client = require('ssh2-sftp-client');\nlet sftp = new Client();\n\nsftp.connect({\n  host: '127.0.0.1',\n  port: '8080',\n  username: 'username',\n  password: '******'\n}).then(() => {\n  return sftp.list('/pathname');\n}).then(data => {\n  console.log(data, 'the data info');\n}).catch(err => {\n  console.log(err, 'catch error');\n});\n```\n\n# Version 6.x Changes<a id=\"sec-4\"></a>\n\n## Version 6.0.1<a id=\"sec-4-1\"></a>\n\n-   Fix issue with connect retry not releasing 'ready' listener.\n-   Add finally clauses to all promises to ensure release of temporary listeners.\n-   Add nyc module to improve test coverage\n-   Added additional utils tests to improve test coverage\n-   Removed some unnecessary util functions to reduce code size\n\n## Version 6.0.0 Changes<a id=\"sec-4-2\"></a>\n\n-   Added new optional argument *notFoundOK* to `delete()` method. If true, no error is thrown when trying to delete a file which does not exist. Default is false.\n-   Added new filter argument to `uploadDir()` and `downloadDir()` methods. The filter argument is a regular expression used to match the files and directories to be included in the upload or download. Defaults to match all files and directories.\n-   New event handling approach. Have standardised the adding and removing of event handlers as well as added event handlers for *close* and *end* events. Some sftp servers appear to abruptly terminate connections without issuing an *error* event. This could result in failing to resolve the promise associated with the action being performed. Adding *close* and *end* listeners to reject a promise should prevent the scripts from hanging when the remote server does not return either a status or an error.\n-   Replace the `retry` library module with the `promise-retry` library module. This module also uses the `retry` library, but at a higher level abstracted for use with Promises. As a result, the number of failed retries is no longer returned as part of the error message when all attempted connection retries fail.\n-   Reduced argument verification code. Version 5.x added a lot of additional argument verification code in an attempt to provide more meaningful error messages. While this goal was achieved, it did have a significant performance impact, especially with respect to small file transfers. This additional argument verification has now been removed in favour of faster code. The downside is that some error messages have changed and in some cases, will not be as meaningful or will be more generic in nature. This seems as a reasonable compromise. It may result in increased difficulty tracking down why a script is failing, but once a script is working, it should be more efficient. If your code relies on the text in error messages, you will need to verify whether the text is still the same in any testing and adjust where necessary.\n\n# Documentation<a id=\"sec-5\"></a>\n\nThe connection options are the same as those offered by the underlying SSH2 module. For full details, please see [SSH2 client methods](https://github.com/mscdex/ssh2#user-content-client-methods)\n\nAll the methods will return a Promise, except for `on()` and `removeListener()`, which are typically only used in special use cases.\n\n## Specifying Paths<a id=\"sec-5-1\"></a>\n\nThe convention with both FTP and SFTP is that paths are specified using a 'nix' style i.e. use '*' as the path separator. This means that even if your SFTP server is running on a win32 platform, you should use '*' instead of '\\\\' as the path separator. For example, for a win32 path of 'C:\\Users\\fred' you would actually use '/C:/Users/fred'. If your win32 server does not support the 'nix' path convention, you can try setting the `remotePathSep` property of the `SftpClient` object to the path separator of your remote server. This **might** work, but has not been tested. Please let me know if you need to do this and provide details of the SFTP server so that I can try to create an appropriate environment and adjust things as necessary. At this point, I'm not aware of any win32 based SFTP servers which do not support the 'nix' path convention.\n\nAll remote paths must either be absolute e.g. `/absolute/path/to/file` or they can be relative with a prefix of either `./` (relative to current remote directory) or `../` (relative to parent of current remote directory) e.g. `./relative/path/to/file` or `../relative/to/parent/file`. It is also possible to do things like `../../../file` to specify the parent of the parent of the parent of the current remote directory. The shell tilde (`~`) and common environment variables like `$HOME` are NOT supported.\n\nIt is important to recognise that the current remote directory may not always be what you may expect. A lot will depend on the remote platform of the SFTP server and how the SFTP server has been configured. When things don't seem to be working as expected, it is often a good idea to verify your assumptions regarding the remote directory and remote paths. One way to do this is to login using a command line program like `sftp` or `lftp`.\n\nThere is a small performance hit for using `./` and `../` as the module must query the remote server to determine what the root path is and derive the absolute path. Using absolute paths are therefore more efficient and likely more robust.\n\nWhen specifying file paths, ensure to include a full path i.e. include the remote filename. Don't expect the module to append the local file name to the path you provide. For example, the following will not work\n\n```javascript\nclient.put('/home/fred/test.txt', '/remote/dir');\n```\n\nwill not result in the file `test.txt` being copied to `/remote/dir/test.txt`. You need to specify the target filename as well e.g.\n\n```javascript\nclient.put('/home/fred/test.txt', '/remote/dir/test.txt');\n```\n\nNote that the remote file name does not have to be the same as the local file name. The following works fine;\n\n```javascript\nclient.put('/home/fred/test.txt', '/remote/dir/test-copy.txt');\n```\n\nThis will copy the local file `test.txt` to the remote file `test-copy.txt` in the directory `/remote/dir`.\n\n## Methods<a id=\"sec-5-2\"></a>\n\n### new SftpClient(name) ===> SFTP client object<a id=\"sec-5-2-1\"></a>\n\nConstructor to create a new `ssh2-sftp-client` object. An optional `name` string can be provided, which will be used in error messages to help identify which client has thrown the error.\n\n1.  Constructor Arguments\n\n    -   **name:** string. An optional name string used in error messages\n\n2.  Example Use\n\n    ```javascript\n    'use strict';\n\n    const Client = require('ssh2-sftp-client');\n\n    const config = {\n      host: 'example.com',\n      username: 'donald',\n      password: 'my-secret'\n    };\n\n    const sftp = new Client('example-client');\n\n    sftp.connect(config)\n      .then(() => {\n        return sftp.cwd();\n      })\n      .then(p => {\n        console.log(`Remote working directory is ${p}`);\n        return sftp.end();\n      })\n      .catch(err => {\n        console.log(`Error: ${err.message}`); // error message will include 'example-client'\n      });\n    ```\n\n### connect(config) ===> SFTPstream<a id=\"sec-5-2-2\"></a>\n\nConnect to an sftp server. Full documentation for connection options is available [here](https://github.com/mscdex/ssh2#user-content-client-methods)\n\n1.  Connection Options\n\n    This module is based on the excellent [SSH2](https://github.com/mscdex/ssh2#client) module. That module is a general SSH2 client and server library and provides much more functionality than just SFTP connectivity. Many of the connect options provided by that module are less relevant for SFTP connections. It is recommended you keep the config options to the minimum needed and stick to the options listed in the `commonOpts` below.\n\n    The `retries`, `retry_factor` and `retry_minTimeout` options are not part of the SSH2 module. These are part of the configuration for the [retry](https://www.npmjs.com/package/retry) package and what is used to enable retrying of sftp connection attempts. See the documentation for that package for an explanation of these values.\n\n    ```javascript\n    // common options\n\n    let commonOpts {\n      host: 'localhost', // string Hostname or IP of server.\n      port: 22, // Port number of the server.\n      forceIPv4: false, // boolean (optional) Only connect via IPv4 address\n      forceIPv6: false, // boolean (optional) Only connect via IPv6 address\n      username: 'donald', // string Username for authentication.\n      password: 'borsch', // string Password for password-based user authentication\n      agent: process.env.SSH_AGENT, // string - Path to ssh-agent's UNIX socket\n      privateKey: fs.readFileSync('/path/to/key'), // Buffer or string that contains\n      passphrase: 'a pass phrase', // string - For an encrypted private key\n      readyTimeout: 20000, // integer How long (in ms) to wait for the SSH handshake\n      strictVendor: true // boolean - Performs a strict server vendor check\n      debug: myDebug // function - Set this to a function that receives a single\n                    // string argument to get detailed (local) debug information.\n      retries: 2 // integer. Number of times to retry connecting\n      retry_factor: 2 // integer. Time factor used to calculate time between retries\n      retry_minTimeout: 2000 // integer. Minimum timeout between attempts\n    };\n\n    // rarely used options\n\n    let advancedOpts {\n      localAddress,\n      localPort,\n      hostHash,\n      hostVerifier,\n      agentForward,\n      localHostname,\n      localUsername,\n      tryKeyboard,\n      authHandler,\n      keepaliveInterval,\n      keepaliveCountMax,\n      sock,\n      algorithms,\n      compress\n    };\n    ```\n\n2.  Example Use\n\n    ```javascript\n    sftp.connect({\n      host: example.com,\n      port: 22,\n      username: 'donald',\n      password: 'youarefired'\n    });\n    ```\n\n### list(path, pattern) ==> Array[object]<a id=\"sec-5-2-3\"></a>\n\nRetrieves a directory listing. This method returns a Promise, which once realised, returns an array of objects representing items in the remote directory.\n\n-   **path:** {String} Remote directory path\n-   **pattern:** (optional) {string|RegExp} A pattern used to filter the items included in the returned array. Pattern can be a simple *glob*-style string or a regular expression. Defaults to `/.*/`.\n\n1.  Example Use\n\n    ```javascript\n    const Client = require('ssh2-sftp-client');\n\n    const config = {\n      host: 'example.com',\n      port: 22,\n      username: 'red-don',\n      password: 'my-secret'\n    };\n\n    let sftp = new Client;\n\n    sftp.connect(config)\n      .then(() => {\n        return sftp.list('/path/to/remote/dir');\n      })\n      .then(data => {\n        console.log(data);\n      })\n      .then(() => {\n        sftp.end();\n      })\n      .catch(err => {\n        console.error(err.message);\n      });\n    ```\n\n2.  Return Objects\n\n    The objects in the array returned by `list()` have the following properties;\n\n    ```javascript\n    {\n      type: // file type(-, d, l)\n      name: // file name\n      size: // file size\n      modifyTime: // file timestamp of modified time\n      accessTime: // file timestamp of access time\n      rights: {\n        user:\n        group:\n        other:\n      },\n      owner: // user ID\n      group: // group ID\n    }\n    ```\n\n3.  Pattern Filter\n\n    The filter options can be a regular expression (most powerful option) or a simple *glob*-like string where \\* will match any number of characters, e.g.\n\n        foo* => foo, foobar, foobaz\n        *bar => bar, foobar, tabbar\n        *oo* => foo, foobar, look, book\n\n    The *glob*-style matching is very simple. In most cases, you are best off using a real regular expression which will allow you to do more powerful matching and anchor matches to the beginning/end of the string etc.\n\n### exists(path) ==> boolean<a id=\"sec-5-2-4\"></a>\n\nTests to see if remote file or directory exists. Returns type of remote object if it exists or false if it does not.\n\n1.  Example Use\n\n    ```javascript\n    const Client = require('ssh2-sftp-client');\n\n    const config = {\n      host: 'example.com',\n      port: 22,\n      username: 'red-don',\n      password: 'my-secret'\n    };\n\n    let sftp = new Client;\n\n    sftp.connect(config)\n      .then(() => {\n        return sftp.exists('/path/to/remote/dir');\n      })\n      .then(data => {\n        console.log(data);          // will be false or d, -, l (dir, file or link)\n      })\n      .then(() => {\n        sftp.end();\n      })\n      .catch(err => {\n        console.error(err.message);\n      });\n    ```\n\n### stat(path) ==> object<a id=\"sec-5-2-5\"></a>\n\nReturns the attributes associated with the object pointed to by `path`.\n\n-   **path:** String. Remote path to directory or file on remote server\n\n1.  Attributes\n\n    The `stat()` method returns an object with the following properties;\n\n    ```javascript\n    let stats = {\n      mode: 33279, // integer representing type and permissions\n      uid: 1000, // user ID\n      gid: 985, // group ID\n      size: 5, // file size\n      accessTime: 1566868566000, // Last access time. milliseconds\n      modifyTime: 1566868566000, // last modify time. milliseconds\n      isDirectory: false, // true if object is a directory\n      isFile: true, // true if object is a file\n      isBlockDevice: false, // true if object is a block device\n      isCharacterDevice: false, // true if object is a character device\n      isSymbolicLink: false, // true if object is a symbolic link\n      isFIFO: false, // true if object is a FIFO\n      isSocket: false // true if object is a socket\n    };\n    ```\n\n2.  Example Use\n\n    ```javascript\n    let client = new Client();\n\n    client.connect(config)\n      .then(() => {\n        return client.stat('/path/to/remote/file');\n      })\n      .then(data => {\n        // do something with data\n      })\n      .then(() => {\n        client.end();\n      })\n      .catch(err => {\n        console.error(err.message);\n      });\n    ```\n\n### get(path, dst, options) ==> String|Stream|Buffer<a id=\"sec-5-2-6\"></a>\n\nRetrieve a file from a remote SFTP server. The `dst` argument defines the destination and can be either a string, a stream object or undefined. If it is a string, it is interpreted as the path to a location on the local file system (path should include the file name). If it is a stream object, the remote data is passed to it via a call to pipe(). If `dst` is undefined, the method will put the data into a buffer and return that buffer when the Promise is resolved. If `dst` is defined, it is returned when the Promise is resolved.\n\nIn general, if your going to pass in a string as the destination, you are better off using the `fastGet()` method.\n\n-   **path:** String. Path to the remote file to download\n-   **dst:** String|Stream. Destination for the data. If a string, it should be a local file path.\n-   **options:** Options for the `get()` command (see below).\n\n1.  Options\n\n    The options object can be used to pass options to the underlying readStream used to read the data from the remote server.\n\n    ```javascript\n    {\n      flags: 'r',\n      encoding: null,\n      handle: null,\n      mode: 0o666,\n      autoClose: true\n    }\n    ```\n\n    Most of the time, you won't want to use any options. Sometimes, it may be useful to set the encoding. For example, to 'utf-8'. However, it is important not to do this for binary files to avoid data corruption.\n\n2.  Example Use\n\n    ```javascript\n    let client = new Client();\n\n    let remotePath = '/remote/server/path/file.txt';\n    let dst = fs.createWriteStream('/local/file/path/copy.txt');\n\n    client.connect(config)\n      .then(() => {\n        return client.get(remotePath, dst);\n      })\n      .then(() => {\n        client.end();\n      })\n      .catch(err => {\n        console.error(err.message);\n      });\n    ```\n\n    -   **Tip:** See examples file in the Git repository for more examples. You can pass any writeable stream in as the destination. For example, if you pass in `zlib.createGunzip()` writeable stream, you can both download and decompress a gzip file 'on the fly'.\n\n### fastGet(remotePath, localPath, options) ===> string<a id=\"sec-5-2-7\"></a>\n\nDownloads a file at remotePath to localPath using parallel reads for faster throughput. This is the simplest method if you just want to download a file.\n\n-   **remotePath:** String. Path to the remote file to download\n-   **localPath:** String. Path on local file system for the downloaded file. The local path should include the filename to use for saving the file.\n-   **options:** Options for `fastGet()` (see below)\n\n1.  Options\n\n    ```javascript\n    {\n      concurrency: 64, // integer. Number of concurrent reads to use\n      chunkSize: 32768, // integer. Size of each read in bytes\n      step: function(total_transferred, chunk, total) // callback called each time a\n                                                      // chunk is transferred\n    }\n    ```\n\n    -   **Warning:** Some servers do not respond correctly to requests to alter chunk size. This can result in lost or corrupted data.\n\n2.  Sample Use\n\n    ```javascript\n    let client = new Client();\n    let remotePath = '/server/path/file.txt';\n    let localPath = '/local/path/file.txt';\n\n    client.connect(config)\n      .then(() => {\n        client.fastGet(remotePath, localPath);\n      })\n      .then(() => {\n        client.end();\n      })\n      .catch(err => {\n        console.error(err.message);\n      });\n    ```\n\n### put(src, remotePath, options) ==> string<a id=\"sec-5-2-8\"></a>\n\nUpload data from local system to remote server. If the `src` argument is a string, it is interpreted as a local file path to be used for the data to transfer. If the `src` argument is a buffer, the contents of the buffer are copied to the remote file and if it is a readable stream, the contents of that stream are piped to the `remotePath` on the server.\n\n-   **src:** string | buffer | readable stream. Data source for data to copy to the remote server.\n-   **remotePath:** string. Path to the remote file to be created on the server.\n-   **options:** object. Options which can be passed to adjust the write stream used in sending the data to the remote server (see below).\n\n1.  Options\n\n    The following options are supported;\n\n    ```javascript\n    {\n      flags: 'w',  // w - write and a - append\n      encoding: null, // use null for binary files\n      mode: 0o666, // mode to use for created file (rwx)\n      autoClose: true // automatically close the write stream when finished\n    }\n    ```\n\n    The most common options to use are mode and encoding. The values shown above are the defaults. You do not have to set encoding to utf-8 for text files, null is fine for all file types. However, using utf-8 encoding for binary files will often result in data corruption.\n\n2.  Example Use\n\n    ```javascript\n    let client = new Client();\n\n    let data = fs.createReadStream('/path/to/local/file.txt');\n    let remote = '/path/to/remote/file.txt';\n\n    client.connect(config)\n      .then(() => {\n        return client.put(data, remote);\n      })\n      .then(() => {\n        return client.end();\n      })\n      .catch(err => {\n        console.error(err.message);\n      });\n    ```\n\n    -   **Tip:** If the src argument is a path string, consider just using `fastPut()`.\n\n### fastPut(localPath, remotePath, options) ==> string<a id=\"sec-5-2-9\"></a>\n\nUploads the data in file at `localPath` to a new file on remote server at `remotePath` using concurrency. The options object allows tweaking of the fast put process.\n\n-   **localPath:** string. Path to local file to upload\n-   **remotePath:** string. Path to remote file to create\n-   **options:** object. Options passed to createWriteStream (see below)\n\n1.  Options\n\n    ```javascript\n    {\n      concurrency: 64, // integer. Number of concurrent reads\n      chunkSize: 32768, // integer. Size of each read in bytes\n      mode: 0o755, // mixed. Integer or string representing the file mode to set\n      step: function(total_transferred, chunk, total) // function. Called every time\n      // a part of a file was transferred\n    }\n    ```\n\n    -   **Warning:** There have been reports that some SFTP servers will not honour requests for non-default chunk sizes. This can result in data loss or corruption.\n\n2.  Example Use\n\n    ```javascript\n    let localFile = '/path/to/file.txt';\n    let remoteFile = '/path/to/remote/file.txt';\n    let client = new Client();\n\n    client.connect(config)\n      .then(() => {\n        client.fastPut(localFile, remoteFile);\n      })\n      .then(() => {\n        client.end();\n      })\n      .catch(err => {\n        console.error(err.message);\n      });\n    ```\n\n### append(input, remotePath, options) ==> string<a id=\"sec-5-2-10\"></a>\n\nAppend the `input` data to an existing remote file. There is no integrity checking performed apart from normal writeStream checks. This function simply opens a writeStream on the remote file in append mode and writes the data passed in to the file.\n\n-   **input:** buffer | readStream. Data to append to remote file\n-   **remotePath:** string. Path to remote file\n-   **options:** object. Options to pass to writeStream (see below)\n\n1.  Options\n\n    The following options are supported;\n\n    ```javascript\n    {\n      flags: 'a',  // w - write and a - append\n      encoding: null, // use null for binary files\n      mode: 0o666, // mode to use for created file (rwx)\n      autoClose: true // automatically close the write stream when finished\n    }\n    ```\n\n    The most common options to use are mode and encoding. The values shown above are the defaults. You do not have to set encoding to utf-8 for text files, null is fine for all file types. Generally, I would not attempt to append binary files.\n\n2.  Example Use\n\n    ```javascript\n    let remotePath = '/path/to/remote/file.txt';\n    let client = new Client();\n\n    client.connect(config)\n      .then(() => {\n        return client.append(Buffer.from('Hello world'), remotePath);\n      })\n      .then(() => {\n        return client.end();\n      })\n      .catch(err => {\n        console.error(err.message);\n      });\n    ```\n\n### mkdir(path, recursive) ==> string<a id=\"sec-5-2-11\"></a>\n\nCreate a new directory. If the recursive flag is set to true, the method will create any directories in the path which do not already exist. Recursive flag defaults to false.\n\n-   **path:** string. Path to remote directory to create\n-   **recursive:** boolean. If true, create any missing directories in the path as well\n\n1.  Example Use\n\n    ```javascript\n    let remoteDir = '/path/to/new/dir';\n    let client = new Client();\n\n    client.connect(config)\n      .then(() => {\n        return client.mkdir(remoteDir, true);\n      })\n      .then(() => {\n        return client.end();\n      })\n      .catch(err => {\n        console.error(err.message);\n      });\n    ```\n\n### rmdir(path, recursive) ==> string<a id=\"sec-5-2-12\"></a>\n\nRemove a directory. If removing a directory and recursive flag is set to `true`, the specified directory and all sub-directories and files will be deleted. If set to false and the directory has sub-directories or files, the action will fail.\n\n-   **path:** string. Path to remote directory\n-   **recursive:** boolean. If true, remove all files and directories in target directory. Defaults to false\n\n**Note**: There has been at least one report that some SFTP servers will allow non-empty directories to be removed even without the recursive flag being set to true. While this is not standard behaviour, it is recommended that users verify the behaviour of rmdir if there are plans to rely on the recursive flag to prevent removal of non-empty directories.\n\n1.  Example Use\n\n    ```javascript\n    let remoteDir = '/path/to/remote/dir';\n    let client = new Client();\n\n    client.connect(config)\n      .then(() => {\n        return client.rmdir(remoteDir, true);\n      })\n      .then(() => {\n        return client.end();\n      })\n      .catch(err => {\n        console.error(err.message);\n      });\n    ```\n\n### delete(path, noErrorOK) ==> string<a id=\"sec-5-2-13\"></a>\n\nDelete a file on the remote server.\n\n-   **path:** string. Path to remote file to be deleted.\n\n-   **noErrorOK:** boolean. If true, no error is raised when you try to delete a non-existent file. Default is false.\n\n1.  Example Use\n\n    ```javascript\n    let remoteFile = '/path/to/remote/file.txt';\n    let client = new Client();\n\n    client.connect(config)\n      .then(() => {\n        return client.delete(remoteFile);\n      })\n      .then(() => {\n        return client.end();\n      })\n      .catch(err => {\n        console.error(err.message);\n      });\n    ```\n\n### rename(fromPath, toPath) ==> string<a id=\"sec-5-2-14\"></a>\n\nRename a file or directory from `fromPath` to `toPath`. You must have the necessary permissions to modify the remote file.\n\n-   **fromPath:** string. Path to existing file to be renamed\n-   **toPath:** string. Path to new file existing file is to be renamed to. Should not already exist.\n\n1.  Example Use\n\n    ```javascript\n    let from = '/remote/path/to/old.txt';\n    let to = '/remote/path/to/new.txt';\n    let client = new Client();\n\n    client.connect(config)\n      .then(() => {\n        return client.rename(from, to);\n      })\n      .then(() => {\n        return client.end();\n      })\n      .catch(err => {\n        console.error(err.message);\n      });\n    ```\n\n### posixRename(fromPath, toPath) ==> string<a id=\"sec-5-2-15\"></a>\n\nThis method uses the openssh POSIX rename extension introduced in OpenSSH 4.8. The advantage of this version of rename over standard SFTP rename is that it is an atomic operation and will allow renaming a resource where the destination name exists. The POSIX rename will also work on some filesystems which do not support standard SFTP rename because they don't support the system hardlink() call. The POSIX rename extension is available on all openSSH servers from 4.8 and some other implementations. This is an extension to the standard SFTP protocol and therefore is not supported on all sSFTP servers.\n\n-   **fromPath:** string. Path to existing file to be renamed.\n-   **toPath:** string. Path for new name. If it already exists, it will be replaced by file specified in fromPath\n\n```javascript\nlet from = '/remote/path/to/old.txt';\nlet to = '/remote/path/to/new.txt';\nlet client = new Client();\n\nclient.connect(config)\n  .then(() => {\n    return client.posixRename(from, to);\n  })\n  .then(() => {\n    return client.end();\n  })\n  .catch(err => {\n    console.error(err.message);\n  });\n```\n\n### chmod(path, mode) ==> string<a id=\"sec-5-2-16\"></a>\n\nChange the mode (read, write or execute permissions) of a remote file or directory.\n\n-   **path:** string. Path to the remote file or directory\n-   **mode:** octal. New mode to set for the remote file or directory\n\n1.  Example Use\n\n    ```javascript\n    let path = '/path/to/remote/file.txt';\n    let newMode = 0o644;  // rw-r-r\n    let client = new Client();\n\n    client.connect(config)\n      .then(() => {\n        return client.chmod(path, newMode);\n      })\n      .then(() => {\n        return client.end();\n      })\n      .catch(err => {\n        console.error(err.message);\n      });\n    ```\n\n### realPath(path) ===> string<a id=\"sec-5-2-17\"></a>\n\nConverts a relative path to an absolute path on the remote server. This method is mainly used internally to resolve remote path names.\n\n**Warning**: Currently, there is a platform inconsistency with this method on win32 platforms. For servers running on non-win32 platforms, providing a path which does not exist on the remote server will result in an empty e.g. '', absolute path being returned. On servers running on win32 platforms, a normalised path will be returned even if the path does not exist on the remote server. It is therefore advised not to use this method to also verify a path exists. instead, use the `exist()` method.\n\n-   **path:** A file path, either relative or absolute. Can handle '.' and '..', but does not expand '~'.\n\n### cwd() ==> string<a id=\"sec-5-2-18\"></a>\n\nReturns what the server believes is the current remote working directory.\n\n### uploadDir(srcDir, dstDir, filter) ==> string<a id=\"sec-5-2-19\"></a>\n\nUpload the directory specified by `srcDir` to the remote directory specified by `dstDir`. The `dstDir` will be created if necessary. Any sub directories within `srcDir` will also be uploaded. Any existing files in the remote path will be overwritten.\n\nThe upload process also emits 'upload' events. These events are fired for each successfully uploaded file. The `upload` event calls listeners with 1 argument, an object which has properties source and destination. The source property is the path of the file uploaded and the destination property is the path to where the file was uploaded to. The purpose of this event is to provide some way for client code to get feedback on the upload progress. You can add your own lisener using the `on()` method.\n\nThe optionsl *filter* argument is a regular expression which can be used to select which files and directories to include in the upload.\n\n-   **srcDir:** A local file path specified as a string\n-   **dstDir:** A remote file path specified as a string\n-   **filter:** A regular expression used to filter which files and directories to include in the upload\n\n1.  Example\n\n    ```javascript\n        'use strict';\n\n        // Example of using the uploadDir() method to upload a directory\n        // to a remote SFTP server\n\n        const path = require('path');\n        const SftpClient = require('../src/index');\n\n        const dotenvPath = path.join(__dirname, '..', '.env');\n        require('dotenv').config({path: dotenvPath});\n\n        const config = {\n    host: process.env.SFTP_SERVER,\n    username: process.env.SFTP_USER,\n    password: process.env.SFTP_PASSWORD,\n    port: process.env.SFTP_PORT || 22\n        };\n\n        async function main() {\n    const client = new SftpClient('upload-test');\n    const src = path.join(__dirname, '..', 'test', 'testData', 'upload-src');\n    const dst = '/home/tim/upload-test';\n\n    try {\n      await client.connect(config);\n      client.on('upload', info => {\n        console.log(`Listener: Uploaded ${info.source}`);\n      });\n      let rslt = await client.uploadDir(src, dst);\n      return rslt;\n    } finally {\n      client.end();\n    }\n        }\n\n        main()\n    .then(msg => {\n      console.log(msg);\n    })\n    .catch(err => {\n      console.log(`main error: ${err.message}`);\n    });\n\n    ```\n\n### downloadDir(srcDir, dstDir, filter) ==> string<a id=\"sec-5-2-20\"></a>\n\nDownload the remote directory specified by `srcDir` to the local file system directory specified by `dstDir`. The `dstDir` directory will be created if required. All sub directories within `srcDir` will also be copied. Any existing files in the local path will be overwritten. No files in the local path will be deleted.\n\nThe method also emites `download` events to provide a way to monitor download progress. The download event listener is called with one argument, an object with two properties, source and destination. The source property is the path to the remote file that has been downloaded and the destination is the local path to where the file was downloaded to. You can add a listener for this event using the `on()` method.\n\nThe optional *filter* argument is a regular expression which can be used to select which files and directories will be downloaded from the remote server.\n\n-   **srcDir:** A remote file path specified as a string\n-   **dstDir:** A local file path specified as a string\n-   **filter:** A regular expression used to match the files and directories to be downloaded\n\n1.  Example\n\n    ```javascript\n    'use strict';\n\n    // Example of using the downloadDir() method to upload a directory\n    // to a remote SFTP server\n\n    const path = require('path');\n    const SftpClient = require('../src/index');\n\n    const dotenvPath = path.join(__dirname, '..', '.env');\n    require('dotenv').config({path: dotenvPath});\n\n    const config = {\n      host: process.env.SFTP_SERVER,\n      username: process.env.SFTP_USER,\n      password: process.env.SFTP_PASSWORD,\n      port: process.env.SFTP_PORT || 22\n    };\n\n    async function main() {\n      const client = new SftpClient('upload-test');\n      const dst = '/tmp';\n      const src = '/home/tim/upload-test';\n\n      try {\n        await client.connect(config);\n        client.on('download', info => {\n    console.log(`Listener: Download ${info.source}`);\n        });\n        let rslt = await client.downloadDir(src, dst);\n        return rslt;\n      } finally {\n        client.end();\n      }\n    }\n\n    main()\n      .then(msg => {\n        console.log(msg);\n      })\n      .catch(err => {\n        console.log(`main error: ${err.message}`);\n      });\n\n    ```\n\n### end() ==> boolean<a id=\"sec-5-2-21\"></a>\n\nEnds the current client session, releasing the client socket and associated resources. This function also removes all listeners associated with the client.\n\n1.  Example Use\n\n    ```javascript\n    let client = new Client();\n\n    client.connect(config)\n      .then(() => {\n        // do some sftp stuff\n      })\n      .then(() => {\n        return client.end();\n      })\n      .catch(err => {\n        console.error(err.message);\n      });\n    ```\n\n### Add and Remove Listeners<a id=\"sec-5-2-22\"></a>\n\nAlthough normally not required, you can add and remove custom listeners on the ssh2 client object. This object supports a number of events, but only a few of them have any meaning in the context of SFTP. These are\n\n-   **error:** An error occurred. Calls listener with an error argument.\n-   **end:** The socket has been disconnected. No argument.\n-   **close:** The socket was closed. Boolean argument which is true when the socket was closed due to errors.\n\n1.  on(eventType, listener)\n\n    Adds the specified listener to the specified event type. It the event type is `error`, the listener should accept 1 argument, which will be an Error object. If the event type is `close`, the listener should accept one argument of a boolean type, which will be true when the client connection was closed due to errors.\n\n2.  removeListener(eventType, listener)\n\n    Removes the specified listener from the event specified in eventType. Note that the `end()` method automatically removes all listeners from the client object.\n\n# Platform Quirks & Warnings<a id=\"sec-6\"></a>\n\n## Server Capabilities<a id=\"sec-6-1\"></a>\n\nAll SFTP servers and platforms are not equal. Some facilities provided by `ssh2-sfto-client` either depend on capabilities of the remote server or the underlying capabilities of the remote server platform. As an example, consider `chmod()`. This command depends on a remote filesystem which implements the 'nix' concept of users and groups. The *win32* platform does not have the same concept of users and groups, so `chmod()` will not behave in the same way.\n\nOne way to determine whether an issue you are encountering is due to `ssh2-sftp-client` or due to the remote server or server platform is to use a simple CLI sftp program, such as openSSH's sftp command. If you observe the same behaviour using plain `sftp` on the command line, the issue is likely due to server or remote platform limitations. Note that you should not use a GUI sftp client, like `Filezilla` or `winSCP` as such GUI programs often attempt to hide these server and platform incompatibilities and will take additional steps to simulate missing functionality etc. You want to use a CLI program which does as little as possible.\n\nOne way to determine whether an issue you are encountering is due to `ssh2-sftp-client` or due to the remote server or server platform is to use a simple CLI sftp program, such as openSSH's sftp command. If you observe the same behaviour using plain `sftp` on the command line, the issue is likely due to server or remote platform limitations. Note that you should not use a GUI sftp client, like `Filezilla` or `winSCP` as such GUI programs often attempt to hide these server and platform incompatibilities and will take additional steps to simulate missing functionality etc.\n\n## Promises & Events<a id=\"sec-6-2\"></a>\n\nThe reality of the current Node environment is that Promises and Events don't play nicely together. Part of the problem is that events are asynchronous in nature and can occur at any time. It is very difficult to ensure an event is captured inside a Promise and handled appropriately. More information can be found in the Node documentation for Events.\n\nNode v12 has introduced some experimental features to make working with Events and Promises a little easier. At this stage, we are not using these features because they are experimental and because it would mean you cannot use this module with Node v10. Use of these features will likely be examined more closely once they become stable and non-experimental.\n\nSo, what does this mean for this module? The `ssh2-sftp-client` module works hard to ensure things work as expected. In most cases, events are handled appropriately. However, there are some edge cases where events may not be handled and you may see an uncaught error exception. The most common place to see this is when you keep an SFTP connection open, but don't use it for some time. When the connection is open, but no methods are active (running), there are no error handlers defined. Should an error event be emitted (for exmaple, because the network connection has been lost), there is no handler and you will get an uncaught error exception.\n\nOne way to handle this is to add your own error handler using the on() method. Note however, you need to be careful how many times your error handler is added. If you begin to see a warning about a possible memory leak, it is an indication your error handler is being added multiple times (Node will generate this warning if it finds more than 11 listeners attached to an event emitter).\n\nThe other issue that can occur is that in some rare cases, the error message you get will be potentially misleading. For example, SFTP servers running on Windows appear to emit an *ECONNRESET* error in addition to the main error (for example, for failed authentication). This can result in an error which looks like a connection was reset by the remote host when in fact the real error was due to bad authentication (bad password or bad username). This situation can be made even worse by some platforms which deliberately hide the real error for security reasons e.g. does not report an error indicating a bad username because that information can be used to try and identify legitimate usernames. While this module attempts to provide meaningful error messages which can assist developers track down problems, it is a good idea to consider these errors with a grain of salt and verify the error when possible.\n\n## Windows Based Servers<a id=\"sec-6-3\"></a>\n\nIt appears that when the sftp server is running on Windows, a *ECONNRESET* error signal is raised when the end() method is called. Unfortunately, this signal is raised after a considerable delay. This means we cannot remove the error handler used in the end() promise as otherwise you will get an uncaught exception error. Leaving the handler in place, even though we will ignore this error, solves that issue, but unfortunately introduces a new problem. Because we are not removing the listener, if you re-use the client object for subsequent connections, an additional error handler will be added. If this happens more than 11 times, you will eventually see the Node warning about a possible memory leak. This is because node monitors the number of error handlers and if it sees more than 11 added to an object, it assumes there is a problem and generates the warning.\n\nThe best way to avoid this issue is to not re-use client objects. Always generate a new sftp client object for each new connection.\n\n## Don't Re-use SftpClient Objects<a id=\"sec-6-4\"></a>\n\nDue to an issue with *ECONNRESET* error signals when connecting to Windows based SFTP servers, it is not possible to remove the error handler in the end() method. This means that if you re-use the SftpClient object for multiple connections e.g. calling connect(), then end(), then connect() etc, you run the risk of multiple error handlers being added to the SftpClient object. After 11 handlers have been added, Node will generate a possible memory leak warning.\n\nTo avoid this problem, don't re-use SftpClient objects. Generate a new SftpClient object for each connection. You can perform multiple actions with a single connection e.g. upload multiple files, download multiple files etc, but after you have called end(), you should not try to re-use the object with a further connect() call. Create a new object instead.\n\n# FAQ<a id=\"sec-7\"></a>\n\n## Remote server drops connections with only an end event<a id=\"sec-7-1\"></a>\n\nMany SFTP servers have rate limiting protection which will drop connections once a limit has been reached. In particular, openSSH has the setting `MaxStartups`, which can be a tuple of the form `max:drop:full` where `max` is the maximum allowed unauthenticated connections, `drop` is a percentage value which specifies percentage of connections to be dropped once `max` connections has been reached and `full` is the number of connections at which point all subsequent connections will be dropped. e.g. `10:30:60` means allow up to 10 unauthenticated connections after which drop 30% of connection attempts until reaching 60 unauthenticated connections, at which time, drop all attempts.\n\nClients first make an unauthenticated connection to the SFTP server to begin negotiation of protocol settings (cipher, authentication method etc). If you are creating multiple connections in a script, it is easy to exceed the limit, resulting in some connections being dropped. As SSH2 only raises an 'end' event for these dropped connections, no error is detected. The `ssh2-sftp-client` now listens for `end` events during the connection process and if one is detected, will reject the connection promise.\n\nOne way to avoid this type of issue is to add a delay between connection attempts. It does not need to be a very long delay - just sufficient to permit the previous connection to be authenticated. In fact, the default setting for openSSH is `10:30:60`, so you really just need to have enough delay to ensure that the 1st connection has completed authentication before the 11th connection is attempted.\n\n## How can I pass writable stream as dst for get method?<a id=\"sec-7-2\"></a>\n\nIf the dst argument passed to the get method is a writeable stream, the remote file will be piped into that writeable. If the writeable you pass in is a writeable stream created with `fs.createWriteStream()`, the data will be written to the file specified in the constructor call to `createWriteStream()`.\n\nThe writeable stream can be any type of write stream. For example, the below code will convert all the characters in the remote file to upper case before it is saved to the local file system. This could just as easily be something like a gunzip stream from `zlib`, enabling you to decompress remote zipped files as you bring them across before saving to local file system.\n\n```javascript\n'use strict';\n\n// Example of using a writeable with get to retrieve a file.\n// This code will read the remote file, convert all characters to upper case\n// and then save it to a local file\n\nconst Client = require('../src/index.js');\nconst path = require('path');\nconst fs = require('fs');\nconst through = require('through2');\n\nconst config = {\n  host: 'arch-vbox',\n  port: 22,\n  username: 'tim',\n  password: 'xxxx'\n};\n\nconst sftp = new Client();\nconst remoteDir = '/home/tim/testServer';\n\nfunction toupper() {\n  return through(function(buf, enc, next) {\n    next(null, buf.toString().toUpperCase());\n  });\n}\n\nsftp\n  .connect(config)\n  .then(() => {\n    return sftp.list(remoteDir);\n  })\n  .then(data => {\n    // list of files in testServer\n    console.dir(data);\n    let remoteFile = path.join(remoteDir, 'test.txt');\n    let upperWtr = toupper();\n    let fileWtr = fs.createWriteStream(path.join(__dirname, 'loud-text.txt'));\n    upperWtr.pipe(fileWtr);\n    return sftp.get(remoteFile, upperWtr);\n  })\n  .then(() => {\n    return sftp.end();\n  })\n  .catch(err => {\n    console.error(err.message);\n  });\n```\n\n## How can I upload files without having to specify a password?<a id=\"sec-7-3\"></a>\n\nThere are a couple of ways to do this. Essentially, you want to setup SSH keys and use these for authentication to the remote server.\n\nOne solution, provided by @KalleVuorjoki is to use the SSH agent process. **Note**: SSH<sub>AUTH</sub><sub>SOCK</sub> is normally created by your OS when you load the ssh-agent as part of the login session.\n\n```javascript\nlet sftp = new Client();\nsftp.connect({\n  host: 'YOUR-HOST',\n  port: 'YOUR-PORT',\n  username: 'YOUR-USERNAME',\n  agent: process.env.SSH_AUTH_SOCK\n}).then(() => {\n  sftp.fastPut(/* ... */)\n}\n```\n\nAnother alternative is to just pass in the SSH key directly as part of the configuration.\n\n```javascript\nlet sftp = new Client();\nsftp.connect({\n  host: 'YOUR-HOST',\n  port: 'YOUR-PORT',\n  username: 'YOUR-USERNAME',\n  privateKey: fs.readFileSync('/path/to/ssh/key')\n}).then(() => {\n  sftp.fastPut(/* ... */)\n}\n```\n\n## How can I connect through a Socks Proxy<a id=\"sec-7-4\"></a>\n\nThis solution was provided by @jmorino.\n\n```javascript\nimport { SocksClient } from 'socks';\nimport SFTPClient from 'ssh2-sftp-client';\n\nconst host = 'my-sftp-server.net';\nconst port = 22; // default SSH/SFTP port on remote server\n\n// connect to SOCKS 5 proxy\nconst { socket } = await SocksClient.createConnection({\n  proxy: {\n    host: 'my.proxy', // proxy hostname\n    port: 1080, // proxy port\n    type: 5, // for SOCKS v5\n  },\n  command: 'connect',\n  destination: { host, port } // the remote SFTP server\n});\n\nconst client = new SFTPClient();\nclient.connect({\n  host,\n  sock: socket, // pass the socket to proxy here (see ssh2 doc)\n  username: '.....',\n  privateKey: '.....'\n})\n\n// client is connected\n```\n\n## Timeout while waiting for handshake or handshake errors<a id=\"sec-7-5\"></a>\n\nSome users have encountered the error 'Timeout while waiting for handshake' or 'Handshake failed, no matching client->server ciphers. This is often due to the client not having the correct configuration for the transport layer algorithms used by ssh2. One of the connect options provided by the ssh2 module is `algorithm`, which is an object that allows you to explicitly set the key exchange, ciphers, hmac and compression algorithms as well as server host key used to establish the initial secure connection. See the SSH2 documentation for details. Getting these parameters correct usually resolves the issue.\n\n## How can I limit upload/download speed<a id=\"sec-7-6\"></a>\n\nIf you want to limit the amount of bandwidth used during upload/download of data, you can use a stream to limit throughput. The following example was provided by *kennylbj*. Note that there is a caveat that we must set the `autoClose` flag to false to avoid calling an extra `_read()` on a closed stream that may cause \\_get Permission Denied error in ssh2-streams.\n\n```javascript\n\n\nconst Throttle = require('throttle');\nconst progress = require('progress-stream');\n\n// limit download speed\nconst throttleStream = new Throttle(config.throttle);\n\n// download progress stream\nconst progressStream = progress({\n  length: fileSize,\n  time: 500,\n});\nprogressStream.on('progress', (progress) => {\n  console.log(progress.percentage.toFixed(2));\n});\n\nconst outStream = createWriteStream(localPath);\n\n// pipe streams together\nthrottleStream.pipe(progressStream).pipe(outStream);\n\ntry {\n  // set autoClose to false\n  await client.get(remotePath, throttleStream, { autoClose: false });\n} catch (e) {\n  console.log('sftp error', e);\n} finally {\n  await client.end();\n}\n```\n\n# Examples<a id=\"sec-8\"></a>\n\nI have started collecting example scripts in the example directory of the repository. These are mainly scripts I have put together in order to investigate issues or provide samples for users. They are not robust, lack adequate error handling and may contain errors. However, I think they are still useful for helping developers see how the module and API can be used.\n\n# Troubleshooting<a id=\"sec-9\"></a>\n\nThe `ssh2-sftp-client` module is essentially a wrapper around the `ssh2` and `ssh2-streams` modules, providing a higher level `promise` based API. When you run into issues, it is important to try and determine where the issue lies - either in the ssh2-sftp-client module or the underlying `ssh2` and `ssh2-streams` modules. One way to do this is to first identify a minimal reproducible example which reproduces the issue. Once you have that, try to replicate the functionality just using the `ssh2` and `ssh2-streams` modules. If the issue still occurs, then you can be fairly confident it is something related to those later 2 modules and therefore and issue which should be referred to the maintainer of that module.\n\nThe `ssh2` and `ssh2-streams` modules are very solid, high quality modules with a large user base. Most of the time, issues with those modules are due to client misconfiguration. It is therefore very important when trying to diagnose an issue to also check the documentation for both `ssh2` and `ssh2-streams`. While these modules have good defaults, the flexibility of the ssh2 protocol means that not all options are available by default. You may need to tweak the connection options, ssh2 algorithms and ciphers etc for some remote servers. The documentation for both the `ssh2` and `ssh2-streams` module is quite comprehensive and there is lots of valuable information in the issue logs.\n\nIf you run into an issue which is not repeatable with just the `ssh2` and `ssh2-streams` modules, then please log an issue against the `ssh2-sftp-client` module and I will investigate. Please note the next section on logging issues.\n\nNote also that in the repository there are two useful directories. The first is the examples directory, which contain some examples of using `ssh2-sftp-client` to perform common tasks. A few minutes reviewing these examples can provide that additional bit of detail to help fix any problems you are encountering.\n\nThe second directory is the validation directory. I have some very simple scripts in this directory which perform basic tasks using only the `ssh2` modules (no `ssh2-sftp-client` module). These can be useful when trying to determine if the issue is with the underlying `ssh2` module or the `ssh2-sftp-client` wrapper module.\n\n## Common Errors<a id=\"sec-9-1\"></a>\n\nThere are some common errors people tend to make when using Promises or Asyc/Await. These are by far the most common problem found in issues logged against this module. Please check for some of these before logging your issue.\n\n### Not returning the promise in a `then()` block<a id=\"sec-9-1-1\"></a>\n\nAll methods in `ssh2-sftp-client` return a Promise. This means methods are executed *asynchrnously*. When you call a method inside the `then()` block of a promise chain, it is critical that you return the Promise that call generates. Failing to do this will result in the `then()` block completing and your code starting execution of the next `then()`, `catch()` or `finally()` block before your promise has been fulfilled. For example, the following will not do what you expect\n\n```javascript\nsftp.connect(config)\n  .then(() => {\n    sftp.fastGet('foo.txt', 'bar.txt');\n  }).then(rslt => {\n    console.log(rslt);\n    sftp.end();\n  }).catch(e => {\n    console.error(e.message);\n  });\n```\n\nIn the above code, the `sftp.end()` method will almost certainly be called before `sftp.fastGet()` has been fulfilled (unless the *foo.txt* file is really small!). In fact, the whole promise chain will complete and exit even before the `sftp.end()` call has been fulfilled. The correct code would be something like\n\n```javascript\nsftp.connect(config)\n  .then(() => {\n    return sftp.fastGet('foo.txt', 'bar.txt');\n  }).then(rslt => {\n    console.log(rslt);\n    return sftp.end();\n  }).catch(e => {\n    console.error(e.message);\n  });\n```\n\nNote the `return` statements. These ensure that the Promise returned by the client method is returned into the promise chain. It will be this promise the next block in the chain will wait on to be fulfilled before the next block is executed. Without the return statement, that block will return the default promise for that block, which essentially says *this block has been fulfilled*. What you really want is the promise which says *your sftp client method call has been fulfilled*.\n\nA common symptom of this type of error is for file uploads or download to fail to complete or for data in those files to be truncated. What is happening is that the connection is being ended before the transfer has completed.\n\n### Mixing Promise Chains and Async/Await<a id=\"sec-9-1-2\"></a>\n\nAnother common error is to mix Promise chains and async/await calls. This is rarely a great idea. While you can do this, it tends to create complicated and difficult to maintain code. Select one approach and stick with it. Both approaches are functionally equivalent, so there is no reason to mix up the two paradigms. My personal preference would be to use async/await as I think that is more *natural* for most developers. For example, the following is more complex and difficult to follow than necessary (and has a bug!)\n\n```javascript\nsftp.connect(config)\n  .then(() => {\n    return sftp.cwd();\n  }).then(async (d) => {\n    console.log(`Remote directory is ${d}`);\n    try {\n      await sftp.fastGet(`${d}/foo.txt`, `./bar.txt`);\n    }.catch(e => {\n      console.error(e.message);\n    });\n  }).catch(e => {\n    console.error(e.message);\n  }).finally(() => {\n    sftp.end();\n  });\n```\n\nThe main bug in the above code is the `then()` block is not returning the Promise generated by the call to `sftp.fastGet()`. What it is actually returning is a fulfilled promise which says the `then()` block has been run (note that the await'ed promise is not being returned and is therefore outside the main Promise chain). As a result, the `finally()` block will be executed before the await promise has been fulfilled.\n\nUsing async/await inside the promise chain has created unnecessary complexity and leads to incorrect assumptions regarding how the code will execute. A quick glance at the code is likely to give the impression that execution will wait for the `sftp.fastGet()` call to be fulfilled before continuing. This is not the case. The code would be more clearly expressed as either\n\n```javascript\nsftp.connect(config)\n  .then(() => {\n    return sftp.cwd();\n  }).then(d => {\n    console.log(`remote dir ${d}`);\n    return sftp.fastGet(`${d}/foot.txt`, 'bar.txt');\n  }).catch(e => {\n    console.error(e.message);\n  }).finally(() => {\n    return sftp.end();\n  });\n```\n\n**or, using async/await**\n\n```javascript\nasync function doSftp() {\n  try {\n    let sftp = await sftp.connect(conf);\n    let d = await sftp.cwd();\n    console.log(`remote dir is ${d}`);\n    await sftp.fastGet(`${d}/foo.txt`, 'bat.txt');\n  } catch (e) {\n    console.error(e.message);\n  } finally () {\n    await sftp.end();\n  }\n}\n```\n\n### Try/catch and Error Handlers<a id=\"sec-9-1-3\"></a>\n\nAnother common error is to try and use a try/catch block to catch event signals, such as an error event. In general, you cannot use try/catch blocks for asynchronous code and expect errors to be caught by the `catch` block. Handling errors in asynchronous code is one of the key reasons we now have the Promise and async/await frameworks.\n\nThe basic problem is that the try/catch block will have completed execution before the asynchronous code has completed. If the asynchronous code has not compleed, then there is a potential for it to raise an error. However, as the try/catch block has already completed, there is no *catch* waiting to catch the error. It will bubble up and probably result in your script exiting with an uncaught exception error.\n\nError events are essentially asynchronous code. You don't know when such events will fire. Therefore, you cannot use a try/catch block to catch such event errors. Even creating an error handler which then throws an exception won't help as the key problem is that your try/catch block has already executed. There are a number of alternative ways to deal with this situation. However, the key symptom is that you see occasional uncaught error exceptions that cause your script to exit abnormally despite having try/catch blocks in your script. What you need to do is look at your code and find where errors are raised asynchronously and use an event handler or some other mechanism to manage any errors raised.\n\n### Server Differences<a id=\"sec-9-1-4\"></a>\n\nNot all SFTP servers are the same. Like most standards, the SFTP protocol has some level of interpretation and allows different levels of compliance. This means there can be differences in behaviour between different servers and code which works with one server will not work the same with another. For example, the value returned by *realpath* for non-existent objects can differ significantly. Some servers will throw an error for a particular operation while others will just return null, some servers support concurrent operations (such as used by fastGet/fastPut) while others will not and of course, the text of error messages can vary significantly. In particular, we have noticed significant differences across different platforms. It is therefore advisable to do comprehensive testing when the SFTP server is moved to a new platform. This includes moving from to a cloud based service even if the underlying platform remains the same. I have noticed that some cloud platforms can generate unexpected events, possibly related to additional functionality or features associated with the cloud implementation. For example, it appears SFTP servers running under Azure will generate an error event when the connection is closed even when the client has requested the connection be terminated. The same SFTP server running natively on Windows does not appear to exhibit such behaviour.\n\n### Avoid Concurrent Operations<a id=\"sec-9-1-5\"></a>\n\nTechnically, SFTP should be able to perform multiple operations concurrently. As node is single threaded, what we a really talking about is running multiple execution contexts as a pool where node will switch contexts when each context is blocked due to things like waiting on network data etc. However, I have found this to be extremely unreliable and of very little benefit from a performance perspective. My recommendation is to therefore avoid executing multiple requests over the same connection in parallel (for example, generating multiple `get()` promises and using something like `Promise.all()` to resolve them.\n\nIf you are going to try and perform concurrent operations, you need to test extensively and ensure you are using data which is large enough that context switching does occur (i.e. the request is not completed in a single run). Some SFTP servers will handle concurrent operations better than others.\n\n## Debugging Support<a id=\"sec-9-2\"></a>\n\nYou can add a `debug` property to the config object passed in to `connect()` to turn on debugging. This will generate quite a lot of output. The value of the property should be a function which accepts a single string argument. For example;\n\n```javascript\nconfig.debug = msg => {\n  console.error(msg);\n};\n\n```\n\nEnabling debugging can generate a lot of output. If you use console.error() as the output (as in the example above), you can redirect the output to a file using shell redirection e.g.\n\n```shell\nnode script.js 2> debug.log\n\n```\n\nIf you just want to see debug messages from `ssh2-sftp-client` and exclude debug messages from the underlying `ssh2` and `ssh2-streams` modules, you can filter based on messages which start with 'CLIENT' e.g.\n\n```javascript\n{\n  debug: (msg) => {\n    if (msg.startsWith('CLIENT')) {\n      console.error(msg);\n    }\n  }\n}\n```\n\n# Logging Issues<a id=\"sec-10\"></a>\n\nPlease log an issue for all bugs, questions, feature and enhancement requests. Please ensure you include the module version, node version and platform.\n\nI am happy to try and help diagnose and fix any issues you encounter while using the `ssh2-sftp-client` module. However, I will only put in effort if you are prepared to put in the effort to provide the information necessary to reproduce the issue. Things which will help\n\n-   Node version you are using\n-   Version of ssh2-sftp-client you are using\n-   Platform your client is running on (Linux, macOS, Windows)\n-   Platform and software for the remote SFTP server when possible\n-   Example of your code or a minimal script which reproduces the issue you are encountering. By far, the most common issue is incorrect use of the module API. Example code can usually result in such issues being resolved very quickly.\n\nPerhaps the best assistance is a minimal reproducible example of the issue. Once the issue can be readily reproduced, it can usually be fixed very quickly.\n\n# Pull Requests<a id=\"sec-11\"></a>\n\nPull requests are always welcomed. However, please ensure your changes pass all tests and if your adding a new feature, that tests for that feature are included. Likewise, for new features or enhancements, please include any relevant documentation updates.\n\nThis module will adopt a standard semantic versioning policy. Please indicate in your pull request what level of change it represents i.e.\n\n-   **Major:** Change to API or major change in functionality which will require an increase in major version number.\n-   **Minor:** Minor change, enhancement or new feature which does not change existing API and will not break existing client code.\n-   **Bug Fix:** No change to functionality or features. Simple fix of an existing bug.\n\n# Contributors<a id=\"sec-12\"></a>\n\nThis module was initially written by jyu213. On August 23rd, 2019, theophilusx took over responsibility for maintaining this module. A number of other people have contributed to this module, but until now, this was not tracked. My intention is to credit anyone who contributes going forward.\n\nThanks to the following for their contributions -\n\n-   **jyu213:** Original author\n-   **theophilusx:** Current maintainer\n-   **henrytk:** Documentation fix\n-   **waldyrious:** Documentation fixes\n-   **james-pellow:** Cleanup and fix for connect method logic\n-   **jhorbulyk:** Contributed posixRename() functionality\n-   **teenangst:** Contributed fix for error code 4 in stat() method\n-   **kennylbj:** Contributed example of using a throttle stream to limit upload/download bandwidth.\n-   **anton-erofeev:** Documentation fix\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/theophilusx/ssh2-sftp-client.git"
  },
  "scripts": {
    "coverage": "nyc npm run test",
    "test": "mocha"
  },
  "version": "6.0.1"
}
